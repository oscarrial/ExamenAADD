import javax.swing.*;import javax.swing.table.DefaultTableModel;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.*;import java.sql.*;import java.util.List;public class ProductManagementPanel extends JFrame {    private JTable productTable;    private DefaultTableModel tableModel;    private Connection connection;    public ProductManagementPanel(Connection connection) {        this.connection = connection;        setTitle("Gestión de Productos");        setLayout(new BorderLayout());        tableModel = new DefaultTableModel(new String[]{"Nombre", "Categoría", "Proveedor", "Descripción", "Precio", "Inventario", "Pedido Pendiente", "Nivel de Reposición", "Descontinuado"}, 0);        productTable = new JTable(tableModel);        add(new JScrollPane(productTable), BorderLayout.CENTER);        JPanel buttonPanel = new JPanel();        JButton loadButton = new JButton("Cargar desde archivo");        JButton exportButton = new JButton("Exportar a archivo");        JButton showButton = new JButton("Mostrar Productos");        buttonPanel.add(loadButton);        buttonPanel.add(exportButton);        buttonPanel.add(showButton);        add(buttonPanel, BorderLayout.SOUTH);        loadButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                loadFromFile();            }        });        exportButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                exportToFile();            }        });        showButton.addActionListener(new ActionListener() {            @Override            public void actionPerformed(ActionEvent e) {                showProducts();            }        });        setSize(600, 400);        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        setLocationRelativeTo(null);    }    private void showProducts() {        try (Statement stmt = connection.createStatement();             ResultSet rs = stmt.executeQuery("SELECT * FROM products")) {            tableModel.setRowCount(0); // Limpiar la tabla            while (rs.next()) {                tableModel.addRow(new Object[]{                        rs.getString("ProductName"),                        rs.getInt("CategoryID"),                        rs.getInt("SupplierID"),                        rs.getString("QuantityPerUnit"),                        rs.getDouble("UnitPrice"),                        rs.getInt("UnitsInStock"),                        rs.getInt("UnitsOnOrder"),                        rs.getInt("ReorderLevel"),                        rs.getBoolean("Discontinued")                });            }            JOptionPane.showMessageDialog(this, "Se han mostrado los productos.");        } catch (SQLException e) {            JOptionPane.showMessageDialog(this, "Error al mostrar productos: " + e.getMessage());        }    }    private void loadFromFile() {        JFileChooser fileChooser = new JFileChooser();        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Archivos de texto", "txt"));        int returnValue = fileChooser.showOpenDialog(this);        if (returnValue == JFileChooser.APPROVE_OPTION) {            File file = fileChooser.getSelectedFile();            try (BufferedReader br = new BufferedReader(new FileReader(file))) {                String line;                int importedRecords = 0;                while ((line = br.readLine()) != null) {                    String[] data = line.split(",");                    // Asegúrate de que el número de columnas coincida                    if (data.length == 9) {                        try (PreparedStatement pstmt = connection.prepareStatement("INSERT INTO products (ProductName, CategoryID, SupplierID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)")) {                            pstmt.setString(1, data[0].trim());                            pstmt.setInt(2, Integer.parseInt(data[1].trim()));                            pstmt.setInt(3, Integer.parseInt(data[2].trim()));                            pstmt.setString(4, data[3].trim());                            pstmt.setDouble(5, Double.parseDouble(data[4].trim()));                            pstmt.setInt(6, Integer.parseInt(data[5].trim()));                            pstmt.setInt(7, Integer.parseInt(data[6].trim()));                            pstmt.setInt(8, Integer.parseInt(data[7].trim()));                            pstmt.setBoolean(9, Integer.parseInt(data[8].trim()) == 1);                            pstmt.executeUpdate();                            importedRecords++;                        }                    }                }                JOptionPane.showMessageDialog(this, "Se han importado " + importedRecords + " registros.");                showProducts(); // Actualiza la tabla            } catch (IOException | SQLException e) {                JOptionPane.showMessageDialog(this, "Error al cargar desde el archivo: " + e.getMessage());            }        }    }    private void exportToFile() {        JFileChooser fileChooser = new JFileChooser();        fileChooser.setDialogTitle("Guardar archivo");        int userSelection = fileChooser.showSaveDialog(this);        if (userSelection == JFileChooser.APPROVE_OPTION) {            File fileToSave = fileChooser.getSelectedFile();            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {                for (int i = 0; i < tableModel.getRowCount(); i++) {                    StringBuilder line = new StringBuilder();                    for (int j = 0; j < tableModel.getColumnCount(); j++) {                        line.append(tableModel.getValueAt(i, j)).append(",");                    }                    writer.write(line.substring(0, line.length() - 1)); // Eliminar la última coma                    writer.newLine();                }                JOptionPane.showMessageDialog(this, "Se han exportado " + tableModel.getRowCount() + " registros.");            } catch (IOException e) {                JOptionPane.showMessageDialog(this, "Error al exportar: " + e.getMessage());            }        }    }}